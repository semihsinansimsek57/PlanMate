import uuid

from sqlalchemy import create_engine, ForeignKey, Column, String, Integer, DateTime, Boolean, CHAR, Time
from sqlalchemy.ext.declarative import declarative_base
from datetime import datetime
from sqlalchemy.orm import relationship, sessionmaker, declarative_base

Base = declarative_base()


class User(Base):
    __tablename__ = 'users'
    user_id = Column("user_id", Integer, primary_key=True, autoincrement=True)
    username = Column("username", String(50), nullable=False, unique=True)
    password = Column("password", String(50), nullable=False)
    email = Column("email", String(50), nullable=False, unique=True)
    verified = Column("verified", Boolean, nullable=False, default=False)
    # verification_code is generated by str(uuid.uuid4()), make the column type accordingly
    verification_code = Column("verification_code", CHAR(36), nullable=False)
    created_at = Column("created_at", DateTime, nullable=False, default=datetime.now())
    updated_at = Column("updated_at", DateTime, nullable=False, default=datetime.now(), onupdate=datetime.now())

    def __init__(self, username, password, email, verified=False, verification_code=None, created_at=None, updated_at=None):
        self.username = username
        self.password = password
        self.email = email
        self.verified = verified
        self.verification_code = verification_code or str(uuid.uuid4())
        self.created_at = created_at or datetime.now()
        self.updated_at = updated_at or datetime.now()

    def __repr__(self):
        return f"User('{self.username}', '{self.email}')"


# Create an events table
class Event(Base):
    __tablename__ = 'events'
    event_id = Column("event_id", Integer, primary_key=True, autoincrement=True)
    event_name = Column("event_name", String(50), nullable=False)
    event_description = Column("event_description", String(100), nullable=False)
    event_date = Column("event_date", DateTime, nullable=False)
    event_time = Column("event_time", Time, nullable=False)
    event_location = Column("event_location", String(50), nullable=False)
    event_organizer = Column("event_organizer", String(50), nullable=False)
    event_organizer_email = Column("event_organizer_email", String(50), nullable=False)
    event_organizer_phone = Column("event_organizer_phone", String(50), nullable=False)
    event_organizer_website = Column("event_organizer_website", String(50), nullable=False)
    event_image = Column("event_image", String(255), nullable=False)
    created_at = Column("created_at", DateTime, nullable=False, default=datetime.now())
    updated_at = Column("updated_at", DateTime, nullable=False, default=datetime.now(), onupdate=datetime.now())
    event_creator_id = Column(Integer, ForeignKey('users.user_id'))

    def __init__(self, event_name, event_description, event_date, event_time, event_location, event_organizer, event_organizer_email, event_organizer_phone, event_organizer_website, event_image, created_at=None, updated_at=None, event_creator_id=None):
        self.event_name = event_name
        self.event_description = event_description
        self.event_date = event_date
        self.event_time = event_time
        self.event_location = event_location
        self.event_organizer = event_organizer
        self.event_organizer_email = event_organizer_email
        self.event_organizer_phone = event_organizer_phone
        self.event_organizer_website = event_organizer_website
        self.event_image = event_image
        self.created_at = created_at or datetime.now()
        self.updated_at = updated_at or datetime.now()
        self.event_creator_id = event_creator_id

    def __repr__(self):
        return f"Event('{self.event_name}', '{self.event_description}', '{self.event_date}', '{self.event_time}', '{self.event_location}', '{self.event_organizer}', '{self.event_organizer_email}', '{self.event_organizer_phone}', '{self.event_organizer_website}', '{self.event_image}')"

class GuestList(Base):
    __tablename__ = 'guest_lists'
    guest_list_id = Column("guest_list_id", Integer, primary_key=True, autoincrement=True)
    guest_list_name = Column("guest_list_name", String(50), nullable=False)
    guest_list_description = Column("guest_list_description", String(100), nullable=False)
    created_at = Column("created_at", DateTime, nullable=False, default=datetime.now())
    updated_at = Column("updated_at", DateTime, nullable=False, default=datetime.now(), onupdate=datetime.now())
    guest_list_creator_id = Column(Integer, ForeignKey('users.user_id'))

    def __init__(self, guest_list_name, guest_list_description, created_at=None, updated_at=None, guest_list_creator_id=None):
        self.guest_list_name = guest_list_name
        self.guest_list_description = guest_list_description
        self.created_at = created_at or datetime.now()
        self.updated_at = updated_at or datetime.now()
        self.guest_list_creator_id = guest_list_creator_id

    def __repr__(self):
        return f"GuestList('{self.guest_list_name}', '{self.guest_list_description}')"

class Guest(Base):
    __tablename__ = 'guests'
    guest_id = Column("guest_id", Integer, primary_key=True, autoincrement=True)
    guest_name = Column("guest_name", String(50), nullable=False)
    guest_email = Column("guest_email", String(50), nullable=False)
    guest_phone = Column("guest_phone", String(50), nullable=False)
    created_at = Column("created_at", DateTime, nullable=False, default=datetime.now())
    updated_at = Column("updated_at", DateTime, nullable=False, default=datetime.now(), onupdate=datetime.now())
    guest_list_id = Column(Integer, ForeignKey('guest_lists.guest_list_id'))

    def __init__(self, guest_name, guest_email, guest_phone, created_at=None, updated_at=None, guest_list_id=None):
        self.guest_name = guest_name
        self.guest_email = guest_email
        self.guest_phone = guest_phone
        self.created_at = created_at or datetime.now()
        self.updated_at = updated_at or datetime.now()
        self.guest_list_id = guest_list_id

    def __repr__(self):
        return f"Guest('{self.guest_name}', '{self.guest_email}', '{self.guest_phone}')"


engine = create_engine('sqlite:///database.db', echo=True)
Base.metadata.create_all(bind=engine)


DBSession = sessionmaker(bind=engine)
db_session = DBSession()


